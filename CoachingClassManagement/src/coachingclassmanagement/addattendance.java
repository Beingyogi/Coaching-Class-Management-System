/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coachingclassmanagement;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
 import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author yogesh
 */
public class addattendance extends javax.swing.JFrame {

    /**
     * Creates new form add attendance
     */
    Connection con=null;
       PreparedStatement pstmt=null;
       
        ResultSet rs=null;
        
    public addattendance() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Date :");

        jDateChooser1.setDateFormatString("yyyy-MM-dd");
        jDateChooser1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Class");

        jComboBox1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Class VI", "Class VII", "Class VIII", "Class IX", "Class X", "Class XI", "Class XII" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Subject :");

        jComboBox2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        try {
            // TODO add your handling code here:
            Class.forName("com.mysql.jdbc.Driver");
            String url="jdbc:mysql://localhost:3306/demo?useSSL=false";
            String username="root";
            String password="YOGESH";
            con=DriverManager.getConnection(url,username,password);
            System.out.println("connection established");
            
            String val =jComboBox1.getSelectedItem().toString();
            jComboBox2.removeAllItems();
            String d1  = ((JTextField)jDateChooser1.getDateEditor().getUiComponent()).getText();
            System.out.println("this is yogesh "+d1);
            switch(val)
            {
                case "Class VI":
                    
                    String sql="select s.subject_name as subject_name "
                            + "from subjects1.classvi s join lectures1.class l on s.id = l.subject_id"
                            + " where l.date=? and class=\"Class VI\" ";
                    
                    pstmt=con.prepareStatement(sql);
                    System.out.println(sql);
                    pstmt.setString(1, d1);
                    rs=pstmt.executeQuery();
                    
                    break;
                    
                case "Class VII":
                    String sql1="select s.subject_name as subject_name "
                            + "from subjects1.classvii s join lectures1.class l on s.id = l.subject_id "
                            + " where l.date=? and class=\"Class VII\"";
                    pstmt=con.prepareStatement(sql1);
                    pstmt.setString(1, d1);
                    rs=pstmt.executeQuery();
                    
                    break;
                    
                case "Class VIII":
    String sql2="select s.subject_name "
            + "from subjects1.classviii s join lectures1.class l on s.id = l.subject_id "
            + " where l.date=? and class=\"Class VIII\"";
                    pstmt=con.prepareStatement(sql2);
                    pstmt.setString(1, d1);
                    rs=pstmt.executeQuery();
                                    
                    break;
                    
                case "Class IX":
    String sql3="select s.subject_name "
            + "from subjects1.classix s join lectures1.class l on s.id = l.subject_id "
            + " where l.date=? and class=\"Class IX\"";
                    pstmt=con.prepareStatement(sql3);
                    pstmt.setString(1, d1);
                    rs=pstmt.executeQuery();
                                    
                    break;
                    
                    case "Class X":
    String sql4="select s.subject_name "
            + "from subjects1.classx s join lectures1.class l on s.id = l.subject_id "
            + "where l.date=? and class=\"Class X\"";
                    pstmt=con.prepareStatement(sql4);
                    pstmt.setString(1, d1);
                    rs=pstmt.executeQuery();
                                    
                    break;
                
                 case "Class XI":
    String sql5="select s.subject_name "
            + "from subjects1.classxi s join lectures1.class l on s.id = l.subject_id "
            + "where l.date=? and class=\"Class XI\"";
                    pstmt=con.prepareStatement(sql5);
                    pstmt.setString(1, d1);
                    rs=pstmt.executeQuery();
                                    
                    break;
                    
                    case "Class XII":
    String sql6="select s.subject_name "
            + "from subjects1.classxii s join lectures1.class l on s.id = l.subject_id "
            + "where l.date=? and class=\"Class XII\"";
                    pstmt=con.prepareStatement(sql6);
                    pstmt.setString(1, d1);
                    rs=pstmt.executeQuery();
                                    
                    break;
                
                   
            
            }
            
           while(rs.next())
            {
                
                jComboBox2.addItem(rs.getString(1));
            }
        
           
           switch (val)
                        {
                            case "Class VI":
                                String sql="select id,first_name,last_name from students.studentvi";
                                pstmt=con.prepareStatement(sql);
                                
                                break;
                                
                            case "Class VII":
                                String sql1="select id,first_name,last_name from students.studentvii";
                                pstmt=con.prepareStatement(sql1);
                                break;
                                
                            case "Class VIII":
                                String sql2="select id,first_name,last_name from students.studentviii";
                                pstmt=con.prepareStatement(sql2);
                                break;
                            case "Class IX":
                                String sql3="select id,first_name,last_name from students.studentix";
                                pstmt=con.prepareStatement(sql3);
                                break;
                            case "Class X":
                                String sql4="select id,first_name,last_name from students.studentx";
                                pstmt=con.prepareStatement(sql4);
                                break;
                                
                            case "Class XI":
                                String sql5="select id,first_name,last_name from students.studentxi";
                                pstmt=con.prepareStatement(sql5);
                                break;
                                
                             case "Class XII":
                                String sql6="select id,first_name,last_name from students.studentxii";
                                pstmt=con.prepareStatement(sql6);
                                break;
                               
                           //please continue from here
                        }
                        rs=pstmt.executeQuery();
                        
       //                 jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                   TableModel utilsModel = DbUtils.resultSetToTableModel(rs);
                    TableModel wrapperModel = new CheckBoxWrapperTableModel(utilsModel, "Select");
                    jTable1.setModel( wrapperModel );
                    
           
            
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(addattendance.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(addattendance.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            pstmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(addattendance.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(addattendance.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            int rows=jTable1.getRowCount();
            Class.forName("com.mysql.jdbc.Driver");
            String url="jdbc:mysql://localhost:3306/demo?useSSL=false";
            String username="root";
            String password="YOGESH";
            con=DriverManager.getConnection(url,username,password);
            System.out.println("connection established");
            String val =jComboBox1.getSelectedItem().toString();
            switch(val)
            {
                case "Class VI":
                    String sql = "insert into attendance.classvi(student_id,lec_id,status)"
                            + "values(?,(select l.id as lec_id from lectures1.class l join subjects1.classvi s \n" +
                              "on l.subject_id=s.id where l.date=? and l.class=? and s.subject_name=?),?)";
                    pstmt=con.prepareStatement(sql);
                    break;
                    
                case "Class VII":
                    String sql1 = "insert into attendance.classvii(student_id,lec_id,status)"
                            + "values(?,(select l.id as lec_id  from lectures1.class l join subjects1.classvii s \n" +
"on l.subject_id=s.id where l.date=? and l.class=? and s.subject_name=?),?)";
                    pstmt=con.prepareStatement(sql1);
                    break;
                case "Class VIII":
                    String sql2 = "insert into attendance.classviii(student_id,lec_id,status)"
                            + "values(?,(select l.id  as lec_id from lectures1.class l join subjects1.classviii s \n" +
"on l.subject_id=s.id where l.date=? and l.class=? and s.subject_name=?),?)";
                    pstmt=con.prepareStatement(sql2);
                    break;
                    
                 case "Class IX":
                    String sql3 = "insert into attendance.classix(student_id,lec_id,status)"
                            + "values(?,(select l.id as lec_id  from lectures1.class l join subjects1.classix s \n" +
"on l.subject_id=s.id where l.date=? and l.class=? and s.subject_name=?),?)";
                    pstmt=con.prepareStatement(sql3);
                    break;
                    
                    case "Class X":
                    String sql4 = "insert into attendance.classx(student_id,lec_id,status)"
                            + "values(?,(select l.id as lec_id  from lectures1.class l join subjects1.classx s \n" +
"on l.subject_id=s.id where l.date=? and l.class=? and s.subject_name=?),?)";
                    pstmt=con.prepareStatement(sql4);
                    break;
                
                 case "Class XI":
                    String sql5 = "insert into attendance.classxi(student_id,lec_id,status)"
                            + "values(?,(select l.id as lec_id  from lectures1.class l join subjects1.classxi s \n" +
"on l.subject_id=s.id where l.date=? and l.class=? and s.subject_name=?),?)";
                    pstmt=con.prepareStatement(sql5);
                    break;
                    
                 case "Class XII":
                    String sql6 = "insert into attendance.classxii(student_id,lec_id,status)"
                            + "values(?,(select l.id as lec_id from lectures1.class l join subjects1.classxii s \n" +
"on l.subject_id=s.id where l.date=? and l.class=? and s.subject_name=?),?)";
                    pstmt=con.prepareStatement(sql6);
                    break;
                   
                  
            }

            con.setAutoCommit(false);
            for(int i=0;i<rows;i++)
            {
                int sid=(int)jTable1.getValueAt(i, 1);
                System.out.println(sid);
                Boolean status=(Boolean)jTable1.getValueAt(i, 0);
                System.out.println(status);
                pstmt.setInt(1, sid);
                pstmt.setString(2, ((JTextField)jDateChooser1.getDateEditor().getUiComponent()).getText());
                pstmt.setString(3, jComboBox1.getSelectedItem().toString());
                pstmt.setString(4, jComboBox2.getSelectedItem().toString());
                pstmt.setBoolean(5, status);
                pstmt.addBatch();
            }          
            
            pstmt.executeBatch();
                    
            con.commit();
             } catch (ClassNotFoundException ex) {
            Logger.getLogger(addattendance.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(addattendance.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            pstmt.close();
        } catch (SQLException ex) {
            Logger.getLogger(addattendance.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(addattendance.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    public class CheckBoxWrapperTableModel extends AbstractTableModel{

        private Map<Integer, Boolean> checkBoxes = new HashMap<Integer, Boolean>();

    private TableModel model;
    private String columnName;

    public CheckBoxWrapperTableModel(TableModel model, String columnName)
    {
        this.model = model;
        this.columnName = columnName;
    }

        public String getColumnName(int col)
    {
            
        return (col > 0) ? model.getColumnName(col - 1) : columnName;
    }
        @Override
        public int getRowCount() {
           return model.getRowCount();
        }

        @Override
        public int getColumnCount() {
        return model.getColumnCount() + 1;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex > 0)
            return model.getValueAt(rowIndex, columnIndex - 1);
        else
        {
            Object value = checkBoxes.get(rowIndex);
            return (value == null) ? Boolean.TRUE : value;
        }
            
            
        }
         public boolean isCellEditable(int row, int col)
    {
        if (col > 0)
            return model.isCellEditable(row, col - 1);
        else
            return true;
    }
         
         public void setValueAt(Object value, int row, int col)
    {
        if (col > 0)
            model.setValueAt(value, row, col - 1);
        else
            checkBoxes.put(row, (Boolean) value);

        fireTableCellUpdated(row, col);
    }

         public Class getColumnClass(int col)
    {
        return (col > 0) ? model.getColumnClass(col - 1) : Boolean.class;
    }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addattendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addattendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addattendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addattendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addattendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
