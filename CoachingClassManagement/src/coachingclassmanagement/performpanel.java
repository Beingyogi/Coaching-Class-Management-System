/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package coachingclassmanagement;

import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
/**
 *
 * @author yogesh
 */
public class performpanel extends javax.swing.JPanel {

    /**
     * Creates new form perform panel
     */
    
    
     Connection con=null;
        Statement stmt=null;
        ResultSet rs=null;
        PreparedStatement pstmt=null;
   
    
    public performpanel() {
        initComponents();
        jTextField1.setEditable(false);
        jTextField2.setEditable(false);
        jTextField3.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Class");

        jComboBox1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Class VI", "Class VII", "Class VIII", "Class IX", "Class X", "Class XI", "Class XII" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Start Date");

        jDateChooser1.setDateFormatString("yyyy-MM-dd");
        jDateChooser1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("End Date");

        jDateChooser2.setDateFormatString("yyyy-MM-dd");
        jDateChooser2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Id");

        jTextField1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("First Name");

        jTextField2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Last Name");

        jTextField3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        jButton1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton1.setText("Class Wise Performance");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jButton2.setText("Student Performance");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        try {
             Class.forName("com.mysql.jdbc.Driver");
            String url="jdbc:mysql://localhost:3306/demo?useSSL=false";
            String username="root";
            String password="YOGESH";
            con=DriverManager.getConnection(url,username,password);
            System.out.println("connection established");
            
        String val =jComboBox1.getSelectedItem().toString();
           switch (val)
                        {
                            case "Class VI":
                                String sql="select id,first_name,last_name from students.studentvi";
                                pstmt=con.prepareStatement(sql);
                                
                                break;
                                
                            case "Class VII":
                                String sql1="select id,first_name,last_name from students.studentvii";
                                pstmt=con.prepareStatement(sql1);
                                break;
                                
                            case "Class VIII":
                                String sql2="select id,first_name,last_name from students.studentviii";
                                pstmt=con.prepareStatement(sql2);
                                break;
                                
                            case "Class IX":
                                String sql3="select id,first_name,last_name from students.studentix";
                                pstmt=con.prepareStatement(sql3);
                                break;
                                
                            case "Class X":
                                String sql4="select  id,first_name,last_name from students.studentx";
                                pstmt=con.prepareStatement(sql4);
                                break;
                                
                            case "Class XI":
                                String sql5="select id,first_name,last_name from students.studentxi";
                                pstmt=con.prepareStatement(sql5);
                                break;
                                
                            case "Class XII":
                                String sql6="select id,first_name,last_name from students.studentxii";
                                pstmt=con.prepareStatement(sql6);
                                break;
                        }
                        
                        rs=pstmt.executeQuery();
                        jTable1.setModel(DbUtils.resultSetToTableModel(rs));
                        
           
           
           
           
           
            } catch (ClassNotFoundException ex) {
             Logger.getLogger(performpanel.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(performpanel.class.getName()).log(Level.SEVERE, null, ex);
         }
        
        
        
        
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
          DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
        int selectedRowIndex =jTable1.getSelectedRow();
        jTextField1.setText(model.getValueAt(selectedRowIndex, 0).toString());
        jTextField2.setText(model.getValueAt(selectedRowIndex, 1).toString());
        jTextField3.setText(model.getValueAt(selectedRowIndex, 2).toString());
       
        
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         try {
             // TODO add your handling code here:
             
             Class.forName("com.mysql.jdbc.Driver");
             String url="jdbc:mysql://localhost:3306/demo?useSSL=false";
             String username="root";
             String password="YOGESH";
             con=DriverManager.getConnection(url,username,password);
             System.out.println("connection established");
                     String val =jComboBox1.getSelectedItem().toString();
                    
             SimpleDateFormat dateformat=new SimpleDateFormat("yyyy-MM-dd");
             String d1 = dateformat.format(jDateChooser1.getDate());
              String d2 = dateformat.format(jDateChooser2.getDate());
            
           switch (val)
           {    
               case "Class VI":
                   
String sql00="delete n1 from results1.classvi n1,results1.classvi n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
 pstmt=con.prepareStatement(sql00);
pstmt.executeUpdate();
      
                   
                   
                                String sql="select  s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
                        "from results1.classvi r join subjects1.classvi s on r.subject_id=s.id\n" +
                        "where r.date between \""+d1+"\" and \""+d2+"\" \n" +
                        "group by subject_id ";
                                
                               pstmt=con.prepareStatement(sql);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset = new JDBCCategoryDataset(con,sql);
                   JFreeChart chart = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer = null;
            CategoryPlot plot = null;
            renderer = new BarRenderer();
            ChartFrame frame = new ChartFrame("Query Chart", chart);
            frame.setVisible(true);
            frame.setLocationRelativeTo(null);
            frame.setSize(400,400);
               
            
                                
                                break;
               case "Class VII":
                   
String sql01="delete n1 from results1.classvii n1,results1.classvii n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
 pstmt=con.prepareStatement(sql01);
pstmt.executeUpdate();


                   String sql1="select  s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
                        "from results1.classvii r join subjects1.classvii s on r.subject_id=s.id\n" +
                        "where r.date between  \""+d1+"\" and \""+d2+"\" \n" +
                        "group by subject_id ";
                            pstmt=con.prepareStatement(sql1);
                            
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql1);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset1 = new JDBCCategoryDataset(con,sql1);
                   JFreeChart chart1 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset1, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer1 = null;
            CategoryPlot plot1 = null;
            renderer1 = new BarRenderer();
            ChartFrame frame1 = new ChartFrame("Query Chart", chart1);
            frame1.setVisible(true);
            frame1.setLocationRelativeTo(null);
            frame1.setSize(400,400);
                            break;
                            
               case "Class VIII":
                   
String sql02="delete n1 from results1.classviii n1,results1.classviii n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
   pstmt=con.prepareStatement(sql02);
pstmt.executeUpdate();
                
                   String sql2="select  s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
                        "from results1.classviii r join subjects1.classviii s on r.subject_id=s.id\n" +
                        "where r.date between \""+d1+"\" and \""+d2+"\" \n" +
                        "group by subject_id ";
                   pstmt=con.prepareStatement(sql2);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql2);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset2 = new JDBCCategoryDataset(con,sql2);
                   JFreeChart chart2 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset2, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer2 = null;
            CategoryPlot plot2 = null;
            renderer2 = new BarRenderer();
            ChartFrame frame2 = new ChartFrame("Query Chart", chart2);
            frame2.setVisible(true);
            frame2.setLocationRelativeTo(null);
            frame2.setSize(400,400);
                   break;
                   
               case "Class IX":
String sql03="delete n1 from results1.classix n1,results1.classix n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
 pstmt=con.prepareStatement(sql03);
pstmt.executeUpdate();
                  
                   String sql3="select  s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
                        "from results1.classix r join subjects1.classix s on r.subject_id=s.id\n" +
                        "where r.date between \""+d1+"\" and \""+d2+"\" \n" +
                        "group by subject_id ";
                   pstmt=con.prepareStatement(sql3);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql3);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset3 = new JDBCCategoryDataset(con,sql3);
                   System.out.println("the command is working but values are not passed");
                   JFreeChart chart3 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset3, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer3 = null;
            CategoryPlot plot3 = null;
            renderer3 = new BarRenderer();
            ChartFrame frame3 = new ChartFrame("Query Chart", chart3);
            frame3.setVisible(true);
            frame3.setLocationRelativeTo(null);
            frame3.setSize(400,400);
                   break;
                   
               case "Class X":
String sql04="delete n1 from results1.classx n1,results1.classx n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
pstmt=con.prepareStatement(sql04);
pstmt.executeUpdate();
                   
                   String sql4="select  s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
                        "from results1.classx r join subjects1.classx s on r.subject_id=s.id\n" +
                        "where r.date between \""+d1+"\" and \""+d2+"\" \n" +
                        "group by subject_id ";
                   pstmt=con.prepareStatement(sql4);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql4);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset4 = new JDBCCategoryDataset(con,sql4);
                   JFreeChart chart4 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset4, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer4 = null;
            CategoryPlot plot4 = null;
            renderer4 = new BarRenderer();
            ChartFrame frame4 = new ChartFrame("Query Chart", chart4);
            frame4.setVisible(true);
            frame4.setLocationRelativeTo(null);
            frame4.setSize(400,400);
                   break;
                   
               case "Class XI":
 
String sql05="delete n1 from results1.classxi n1,results1.classxi n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";    
pstmt=con.prepareStatement(sql05);
pstmt.executeUpdate();

                   String sql5="select  s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
                        "from results1.classxi r join subjects1.classxi s on r.subject_id=s.id\n" +
                        "where r.date between \""+d1+"\" and \""+d2+"\" \n" +
                        "group by subject_id ";
                   pstmt=con.prepareStatement(sql5);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql5);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset5 = new JDBCCategoryDataset(con,sql5);
                   JFreeChart chart5 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset5, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer5 = null;
            CategoryPlot plot5 = null;
            renderer5 = new BarRenderer();
            ChartFrame frame5 = new ChartFrame("Query Chart", chart5);
            frame5.setVisible(true);
            frame5.setLocationRelativeTo(null);
            frame5.setSize(400,400);
                   break;
                   
               case "Class XII":
String sql06="delete n1 from results1.classxii n1,results1.classxii n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
   pstmt=con.prepareStatement(sql06);
pstmt.executeUpdate();
                
                   String sql6="select  s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
                        "from results1.classxii r join subjects1.classxii s on r.subject_id=s.id\n" +
                        "where r.date between \""+d1+"\" and \""+d2+"\" \n" +
                        "group by subject_id ";
                   pstmt=con.prepareStatement(sql6);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql6);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset6 = new JDBCCategoryDataset(con,sql6);
                   JFreeChart chart6 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset6, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer6 = null;
            CategoryPlot plot6 = null;
            renderer6 = new BarRenderer();
            ChartFrame frame6 = new ChartFrame("Query Chart", chart6);
            frame6.setVisible(true);
            frame6.setLocationRelativeTo(null);
            frame6.setSize(400,400);
                   break;
           }
             
            
            
            
            
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(performpanel.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(performpanel.class.getName()).log(Level.SEVERE, null, ex);
         }
           
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         try {
             // TODO add your handling code here:

             Class.forName("com.mysql.jdbc.Driver");
             String url="jdbc:mysql://localhost:3306/demo?useSSL=false";
             String username="root";
             String password="YOGESH";
             con=DriverManager.getConnection(url,username,password);
             System.out.println("connection established");
             String val =jComboBox1.getSelectedItem().toString();
             
             SimpleDateFormat dateformat=new SimpleDateFormat("yyyy-MM-dd");
             String d1 = dateformat.format(jDateChooser1.getDate());
             String d2 = dateformat.format(jDateChooser2.getDate());
             String id = jTextField1.getText();
             switch (val)
           {    
               case "Class VI":
                   
String sql00="delete n1 from results1.classvi n1,results1.classvi n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
   pstmt=con.prepareStatement(sql00);
pstmt.executeUpdate();
                   
                   
                                String sql="select s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
"from results1.classvi r join subjects1.classvi s on r.subject_id=s.id\n" +
"join students.studentvi ss on r.student_id=ss.id\n" +
"where ss.id ="+id+" and r.date between \""+d1+"\" and \""+d2+"\" \n" +
"group by subject_id  ;";
                                
                               pstmt=con.prepareStatement(sql);
                                System.out.println("the date is"+d1+" "+d2+" and id is "+id);
                                 System.out.println(sql);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset = new JDBCCategoryDataset(con,sql);
                   System.out.println("the command is working but values are not passed");
                   JFreeChart chart = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer = null;
            CategoryPlot plot = null;
            renderer = new BarRenderer();
            ChartFrame frame = new ChartFrame("Query Chart", chart);
            frame.setVisible(true);
            frame.setLocationRelativeTo(null);
            frame.setSize(400,400);
               
            
                                
                                break;
               case "Class VII":
String sql01="delete n1 from results1.classvii n1,results1.classvii n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
                   
   pstmt=con.prepareStatement(sql01);
pstmt.executeUpdate();
                   
                   String sql1="select s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
"from results1.classvii r join subjects1.classvii s on r.subject_id=s.id\n" +
"join students.studentvii ss on r.student_id=ss.id\n" +
"where ss.id ="+id+" and r.date between \""+d1+"\" and \""+d2+"\" \n" +
"group by subject_id  ;";
                            pstmt=con.prepareStatement(sql1);
                            
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql1);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset1 = new JDBCCategoryDataset(con,sql1);
                   System.out.println("the command is working but values are not passed");
                   JFreeChart chart1 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset1, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer1 = null;
            CategoryPlot plot1 = null;
            renderer1 = new BarRenderer();
            ChartFrame frame1 = new ChartFrame("Query Chart", chart1);
            frame1.setVisible(true);
            frame1.setLocationRelativeTo(null);
            frame1.setSize(400,400);
                            break;
                            
                             case "Class VIII":
String sql02="delete n1 from results1.classviii n1,results1.classviii n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
 pstmt=con.prepareStatement(sql02);
pstmt.executeUpdate();
  
                                 
                   String sql2="select s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
"from results1.classviii r join subjects1.classviii s on r.subject_id=s.id\n" +
"join students.studentviii ss on r.student_id=ss.id\n" +
"where ss.id ="+id+" and r.date between \""+d1+"\" and \""+d2+"\" \n" +
"group by subject_id  ;";
                   pstmt=con.prepareStatement(sql2);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql2);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset2 = new JDBCCategoryDataset(con,sql2);
                   System.out.println("the command is working but values are not passed");
                   JFreeChart chart2 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset2, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer2 = null;
            CategoryPlot plot2 = null;
            renderer2 = new BarRenderer();
            ChartFrame frame2 = new ChartFrame("Query Chart", chart2);
            frame2.setVisible(true);
            frame2.setLocationRelativeTo(null);
            frame2.setSize(400,400);
                   break;
                   
               case "Class IX":
String sql03="delete n1 from results1.classix n1,results1.classix n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
    pstmt=con.prepareStatement(sql03);
pstmt.executeUpdate();
                  
                   
                   String sql3="select s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
"from results1.classix r join subjects1.classix s on r.subject_id=s.id\n" +
"join students.studentix ss on r.student_id=ss.id\n" +
"where ss.id ="+id+" and r.date between \""+d1+"\" and \""+d2+"\" \n" +
"group by subject_id  ;";
                   pstmt=con.prepareStatement(sql3);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql3);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset3 = new JDBCCategoryDataset(con,sql3);
                   System.out.println("the command is working but values are not passed");
                   JFreeChart chart3 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset3, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer3 = null;
            CategoryPlot plot3 = null;
            renderer3 = new BarRenderer();
            ChartFrame frame3 = new ChartFrame("Query Chart", chart3);
            frame3.setVisible(true);
            frame3.setLocationRelativeTo(null);
            frame3.setSize(400,400);
                   break;
                   
               case "Class X":

String sql04="delete n1 from results1.classx n1,results1.classx n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
                    pstmt=con.prepareStatement(sql04);
pstmt.executeUpdate();
  
                   String sql4="select s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
"from results1.classx r join subjects1.classx s on r.subject_id=s.id\n" +
"join students.studentx ss on r.student_id=ss.id\n" +
"where ss.id ="+id+" and r.date between \""+d1+"\" and \""+d2+"\" \n" +
"group by subject_id  ;";
                   pstmt=con.prepareStatement(sql4);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql4);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset4 = new JDBCCategoryDataset(con,sql4);
                   System.out.println("the command is working but values are not passed");
                   JFreeChart chart4 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset4, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer4 = null;
            CategoryPlot plot4 = null;
            renderer4 = new BarRenderer();
            ChartFrame frame4 = new ChartFrame("Query Chart", chart4);
            frame4.setVisible(true);
            frame4.setLocationRelativeTo(null);
            frame4.setSize(400,400);
                   break;
                   
               case "Class XI":
String sql05="delete n1 from results1.classxi n1,results1.classxi n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
         pstmt=con.prepareStatement(sql05);
pstmt.executeUpdate();
             
                   
                   String sql5="select s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
"from results1.classxi r join subjects1.classxi s on r.subject_id=s.id\n" +
"join students.studentxi ss on r.student_id=ss.id\n" +
"where ss.id ="+id+" and r.date between \""+d1+"\" and \""+d2+"\" \n" +
"group by subject_id  ;";
                   pstmt=con.prepareStatement(sql5);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql5);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset5 = new JDBCCategoryDataset(con,sql5);
                   System.out.println("the command is working but values are not passed");
                   JFreeChart chart5 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset5, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer5 = null;
            CategoryPlot plot5 = null;
            renderer5 = new BarRenderer();
            ChartFrame frame5 = new ChartFrame("Query Chart", chart5);
            frame5.setVisible(true);
            frame5.setLocationRelativeTo(null);
            frame5.setSize(400,400);
                   break;
                   
               case "Class XII":
String sql06="delete n1 from results1.classxii n1,results1.classxii n2\n" +
"where n1.date=n2.date\n" +
"and n1.subject_id=n2.subject_id\n" +
"and n1.student_id=n2.student_id\n" +
"and n1.id>n2.id";                   
           pstmt=con.prepareStatement(sql06);
pstmt.executeUpdate();
           
                   
                   String sql6="select s.subject_name,(avg(r.marks) / avg(r.total_marks))* 100 as percentage\n" +
"from results1.classxii r join subjects1.classxii s on r.subject_id=s.id\n" +
"join students.studentxii ss on r.student_id=ss.id\n" +
"where ss.id ="+id+" and r.date between \""+d1+"\" and \""+d2+"\" \n" +
"group by subject_id  ;";
                   pstmt=con.prepareStatement(sql6);
                                System.out.println("the date is"+d1+" "+d2);
                                 System.out.println(sql6);
              
                                rs=pstmt.executeQuery();
                                               
                   JDBCCategoryDataset dataset6 = new JDBCCategoryDataset(con,sql6);
                   System.out.println("the command is working but values are not passed");
                   JFreeChart chart6 = ChartFactory.createBarChart("Performance", "subject name", "Percentage", dataset6, PlotOrientation.VERTICAL, true, true, false);
             BarRenderer renderer6 = null;
            CategoryPlot plot6 = null;
            renderer6 = new BarRenderer();
            ChartFrame frame6 = new ChartFrame("Query Chart", chart6);
            frame6.setVisible(true);
            frame6.setLocationRelativeTo(null);
            frame6.setSize(400,400);
                   break;
                            
             }
             
             
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(performpanel.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(performpanel.class.getName()).log(Level.SEVERE, null, ex);
         }
            
        
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
